Azure AZ-204 - Microsoft Certified: Azure Developer Associate

https://learn.microsoft.com/en-us/credentials/certifications/resources/study-guides/az-204

Skills at a glance
--------------------
	-> Develop Azure compute solutions (25–30%)
	-> Develop for Azure storage (15–20%)
	-> Implement Azure security (15–20%)
	-> Monitor, troubleshoot, and optimize Azure solutions (10–15%)
	-> Connect to and consume Azure services and third-party services (20–25%)
	
	
One of the important requirement for the exam is to understand interacting with Azure using Powershell and Bash CLI.

We will talk about Powershell in this video.

What is Powershell?
-------------------
	-> Powershell is a task automation and configuration management framework. 
	-> It is built on the .Net Framework initially and works well with Windows platform, Microsoft products, but in the latest release after version 7, Powershell core introduced which is built based on .Net core. This become cross-platform.
	-> It provides command-line interface and using scripting we can automate the repetetive/administrative tasks, integrates well with AD, Exchange Server, Azure.
	-> It has cmdlets which are specialized .NET classes to perform specific operations.
		Eg: Get-Process - gets the list of running processes. 
	-> To work with Azure SDKs, we need minimum of powershell-7.

Get/Download Powershell:
---------------------------
	-> https://github.com/PowerShell/PowerShell	->https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4#installing-the-msi-package
	
Downloaded the Powershell (PowerShell-7.4.3-win-x64) from above link and installed.
When searching for Powershell from Start menu, we can see two options 
		-> Powershell 7 (x64) - This is the one we installed now. - $PSVersionTable.PSVersion
		-> Windows Powershell - This is older version 5.1 - $PSVersionTable.PSVersion
		
	Powershell command to determine the powershell version:
					
					"$PSVersionTable.PSVersion"
		
Okay no we have Powershell installed, but this alone is not enough to interact with Azure, we need one more thing - Azure SDK.

Lets learn more about Azure SDK.

First of all what is SDK?
--------------------------
			SDK - Software Development Kit - which consists of necessary tools, libraries, documentation, code samples to build applications using that. It can also have testing tools to perform unit, functional, performance, compatibility testing.
			
			Examples:
			---------
				=> .Net SDK - For developing applications on the .Net framework
				=> Java SDK(JDK) - For developing Java applications
				=> Android SDK - For developing android applications
				=> iOS SDK - For developing iOS applications
				
			So SDKs provide necessary components to build, test, deploy applications efficiently for a specific environment.	
				
How to check if Azure SDK installed in system using powershell?
----------------------------------------------------------------
		-> Get-Module -Name Az -ListAvailable 
				-> returns nothing, currently nothing installed.
		-> simply running "Get-Module" - returns below 3 records in the same format.
		
-----------------------------------------------------------------------------------------------------
ModuleType Version    PreRelease Name                                ExportedCommands
---------- -------    ---------- ----                                ----------------
Manifest   7.0.0.0               Microsoft.PowerShell.Management     {Add-Content, Clear-Content...}
Manifest   7.0.0.0               Microsoft.PowerShell.Utility        {Add-Member, Add-Type…}
Script     2.3.5                 PSReadLine                          {Get-PSReadLineKeyHandler…}
-----------------------------------------------------------------------------------------------------

I can run this - 

		"Get-Module -Name Microsoft.PowerShell.Management -ListAvailable"

to get below record;

-----------------------------------------------------------------------------------------------------
ModuleType Version    PreRelease Name                                PSEdition ExportedCommands
---------- -------    ---------- ----                                --------- ----------------
Manifest   7.0.0.0               Microsoft.PowerShell.Management     Core      {Add-Content, Clear-Content…}
-----------------------------------------------------------------------------------------------------

Okay, as Azure SDK is not installed on my system, how do we install it?

https://learn.microsoft.com/en-us/powershell/azure/install-azure-powershell?view=azps-12.1.0&viewFallbackFrom=azps-6.6.0

Use the Install-Module cmdlet to install the Az PowerShell module:

		"Install-Module -Name Az -Repository PSGallery -Force"
		
After installing, running this command - Get-Module -Name Az -ListAvailable
-----------------------------------------------------------------------------------------------------
	    Directory: C:\Users\Gowthaman\OneDrive\ドキュメント\PowerShell\Modules

ModuleType Version    PreRelease Name                                PSEdition ExportedCommands
---------- -------    ---------- ----                                --------- ----------------
Script     12.1.0                Az                                  Core,Desk	
-----------------------------------------------------------------------------------------------------

Now we have Latest version of Powershell and Azure SDK installed on our system, still one more thing to be done to start using Azure Commands to interact with Azure.
					
					-> Connecting to Azure Account
					
	How to connect to azure account from powershell?
	------------------------------------------------
		"Connect-AzAccount"
		
	On running this command, it opened up a browser to connect azure account, but for me after giving mail id, but it suggested another command to authenticate;

		"Connect-AzAccount -DeviceCode"
		
	Then it gave a url to hit and authentication code to be entered. 
					Yes its Party time - it is connecteddddddddddddddd!!!!!
					
Subscription name 		Tenant
----------------- 		------
Pay-As-You-Go     Default Directory				
		
Note: When we run Azure Cloud shell for interacting with Azure resources, then we do not need to update powershell, Azure Sdks because that is managed by Microsoft it is always kept upto date.

Azure Virtual Machines:
-----------------------
	Note: VMs are not part of the AZ-204 exam anymore, but we will still spend sometime learning this technology as its basic, essential and interesting.

When we click on "Create a resource" -> it is going to list down number of categories of services that are offered in Azure like Compute, Storage, Networking, Databases, AI + Machine Learning, Analysis...

There is also see more -> on click of this, it is going to list of more services and we could notice under each category there are 10+ services offered like in compute (VMs, Web Apps, Functions, Logic Apps...).

This session we are going to see about "Compute" Services under which we will start off with Virtual machines.
	Compute service basically allows us to run any workloads on azure. 
		-> This could be deploying applications using VMs/Web App Service ....
		
	"Virtual Machines are basically a virtualized machine of a single physical server and it could be used by different customer/tenants but fortunately the VMs within same physical server cannot be interfered with each other and tightly locked"	
		
	Create a Virtual Machine using Portal
	-------------------------------------
	Subscription:
	--------------
			It always needs a subscription to which this resource has to be billed.
			-> Subscription is basically the billing unit within azure, through which our Credit Card charged, company gets charged.
			-> A account can have multiple subscriptions like for different department/projects to charge respectively.
	 Resource Group
	----------------
			-> It is basically logical grouping of the resources, like a folder structure do not have limitation based on geo.
			-> Resource like VM can have only resource group. 
			
	VM name:
	---------
		We can have any name, it does not need to be unique across geo, but it has to be unique for the region we are going to create the resource in.
			-> "azurevm" - is valid if we do not have another VM with same name in the same region.
			
	Region:
	--------
		When we create a resource, we can select the region in which data center we want the resource to be created, to be noted based on this the resource gets charged.
			-> Ideally we should choose the region which is closer to our users.
				
						"US - can have several regions
						Europe - can have several
						Asia pacific - can have several" 
				
				Likewise, it goes on....
			
	Availability Options:
	----------------------
		-> By default the VMs are very highly available, but there could be situation where Microsoft has to apply patches/updates to the servers and that could cause chances for VMs outage for few mins in a month or two.
		-> As well as there could be some unexpected outage chances due to power supply, network issues accross data center/region.
			
	So for this there are 3 levels of availability options provided:
	----------------------------------------------------------------
		Availability Sets
		------------------
			-> When we have this selected, the VM gets deployed to one server and also get replicated to another VM which is not in same physical server/same rack, but within the same data center it tries to put those as far it could, so that any faults in one server/rack affects another.
				-> Still it do not address the issues at building level/data center level.

		Availability Zone:
		------------------
			-> So based on the region selected, it will list zones available to replicate the application/resource within the selected region.
					For eg:
					-------
						West US(3), Central India, Some of the UK region has 3 zones, but south india do not have one. 
				-> This helps to address any issues even at the data center/building level.
				
		Virtual Machine Scale Sets:
		----------------------------
			-> This would replicate the resources across fault domains and zones at scale within the single region.
			-> So based on the demand it will scale the VMs to meet the demand.
			
		Image:
		-------
			-> Images are basically a file template that contains OS, often with some preinstalled applications, set of configurations using which we can create our VMs.
			-> There are many templates available with different OS - Windows, Linux, CentOS ...
			-> These images/boxes Publisher could be Microsoft/third party partners also.
			-> You can find different boxes with different templates with different pricing attached as well.
			-> Unfortunately if we do not find any one that suits our needs, we cannot create a machine without image and do some installation, we must pick one thats listed.

					But why image?
					--------------
						-> This basically helps to quickly provision VM with installed applications, configuration since the template is there, we can scale multiple VMs quickly when there is a need arise with same set of configuration, applications installed.
		
		Run with Azure Spot discount:
		------------------------------
			-> This offers unused Azure capacity at discounted price, like when I check this box, the machine I selected price decreased to 399.34/month from 715/month.
			-> But to note down whenever the excess/unused capacity of Azure disappears the machine gets evicted or deleted as Azure will take back the capacity.
			-> So ideally this is not suited for any mission critical applications, but tolerant for infrastructure loss and low priority applications.
				-> if an application can complete its task in a week, and whenever it gets instance it can complete the purpose within a week, then this would be suitable as at some point the capacity will be of unused and with less cost also.

				Eviction type:
				---------------
					-> Could be when unused capacity disappears.
					-> When the max cost limit set by us for the VM exceeded by current price of VM.

				Eviction Policy:
				----------------
					-> Stop / Deallocate the instance
					-> Delete the instance.
					
		Size:
		------
			-> Here we will not be individually selecting the RAM, Storage disk, Processing speed ... for the machine, but we will be provided number of options with different combinations to choose from.
			-> When I click select All size, I could see it is having 593 options currently for different purposes like General Purpose, Compute Optimized, Memory Optimized with different prices attached to it ranging from 315/month to 817000/month.
			-> There are different names for sizes A series, B series, D series, E, F ... all for different needs.
			-> Most of the B, D series machines are for General Purpose				
			-> In D series also there are Memory Optimized purpose.
			-> Most of the E series are Memory Optimized purpose.
			-> F series are mostly for the purpose of Compute Optimized
			-> Costliest - N series for GPU - cost about 817000/month.
			
	B series: 
			Ideal for workload that do not need 100% full CPU performance all the time.	
	A series:
			Best suited for entry level workloads (development, test)
	E series:
			The 4th, 5th generation of the E series are for high memory needs.
	F series:
			Upto 2X performance boost for vector processing workloads
	
	We need to provide Admin account - AzureUser, AzureUser@123.
	Public inbound ports - By default, resources from the same vnet are not allowed to access the VMs, we can select None to confirm that.
		-> if suppose we want to provide access then select the ports that are allowed access to the VM.
			Http(80), Https(443), SSH(22)

	Then next is "Disks" tab:
	-------------------------
		We know what a Disk is?
			-> it is a storage space used for storing data for accessing it later use.
			-> There are different types of disks available:
				1. Premium SSD - preferred for production environments and critical apps
				2. Standard SSD - preferred for non-prod, dev, test environments
				3. Standard HDD - preferred for low critical, back up, less frequently accessed environment.
			-> Based on these types availability of the VM and pricing changes.
				VMs with premium SSD - qualify for 99.9% availability/connectivity SLA.
			-> 	The different options contributes to variance in pricing and also to latency that how many reads/writes done to a disk. 
				
				"Obvious - Premium SSD > Standard SSD > Standard HDD" (Pricing as well as performance)

		Data Security:
		--------------
			How we can ensure data stored in disk are protected and safe from unauthorized accesses?
			----------------------------------------------------------------------------------------
				-> This is taken care by default whatever is written to disk is encrypted by using Azure Storage Service Encryption (SSE) and also Azure itself maintains the encryption key. 	
					
					-> This is basically Platform-managed key.
				
			Even though this security is very much protected, in some case if suppose we want to have control over encryption keys that are generated, stored, used, for that also Azure offers a service where we can maintain the encryption key in key-vault and manage the encryption.
				
					-> This is Customer-managed key.
					
				For using Customer-managed key, user must create a Disk encryption set and associate it with the managed disks.	
				
			There is also 2 layer of protection could be applied by 2 encryption keys one managed by Azure and another by customer.	
			
			Any data at rest in the disk is protected by encryption managed by both platform as well as customer, to ensure the data stored is very much protected from unauthorized accesses.
			
	Basically the VM comes with the temporary storage disk, and we can also create and attach new disks if needed to store more persistent data, and to note these disks are independent of the VM we attach it so that it can be unmounted and connected to new VM where we can transfer the data/use the data from the disk.

		Please take note of it, the data on the temporary disk that comes with VM are not persistent and data can be lost when deallocated, rebooted...
		
	Then next is Networking tab:
	-----------------------------
		-> We know the network is essential for any machine to connect to another machine/resource to read/write data to.
		-> So any time when we create a VM it is going to create a new virtual network or if we already have a vnet, then we can associate it with VM.
		-> If suppose we want a certain range of IP addresses to be not directly accessible from internet, we can make a subnet of it and configure the inbound rules that way and we can place some confidential resources in it like the database.
			-> so that the db can be accessible by the inbound rule we set and it can never be connected from internet and only within vnet.
		-> To note down one thing all the VMs within a virtual network can access each other by default.
		-> By default virtual machine is accessible only within virtual network and if needed to be connected directly from internet, we can configure the inbound rules and chose the ports via which it can be granted access - HTTP(80), HTTPs(443), RDP(3389) 
		
		-> We can also configure load balancing options to configure how the traffic would be routed to this VM.
		Different types of load balancer:
		----------------------------------
				-> Azure Load balancer
				-> Application gateway (also a type of load balancer)
				

	Management Tab
	---------------
		In this we will do the configurations related to how do we want to manage the VM.
			-> how do we want the VM to logged in to? or accessed by other resources?
				-> should it need "System Assigned Managed Identity" which is going to create an identity for the VM in Azure AD and with the help RBAC assigned any resource/user can get access to the VM without having to store the credentials somewhere which is always not a safer option.
			-> should it be enabled backup?
				-> we know if it has to be replicated to any other data center to make it more available when needed.
			-> Should it configured for site recovery?
				-> should it be keep up and running even during outages.
			-> Should it stay active for all time or we want to make it shut down after a certain time to reduce the charges incurred?
				-> if we want it to be auto shut down at 8pm everyday so that it won't be running for all 24 hrs.
			-> how the patches need to be applied to VM.
				-> Automatic updates/Manual updates/Azure Orchestrated.
				
	Monitoring:
	-----------
		Alerts : To enable recommended alerts to have a view of how the VM is working like if its going beyond 80%, if its going below the 1GB of memory.
		Diagnostics: Boot diagnostics (boot time issues)
		Health: Enable Application Health Monitoring - to check the health status of the applications.
		
	Advanced
	--------
		Here we will be giving some advanced options/configurations to the VM like passing a script to be run while the VM is being provisioned.
			-> To install extensions to VM
			-> To make the host a dedicated to our subscription, so that the host can have VMs only from our subscription, no other tenant can use it.
			-> Capacity Reservation: 
				-> Reservation of capacity for certain amount of time, for which we will be charged from right away though we use it or not. (like a hotel room reservation)
				
			-> Proximity placement group:
				-> This is little bit opposite to availability sets, here we want to place our resources closer to each other for quick communication between them, this would be helpful for low latency requirement.

	Tags:
	------
		This is like a meta data to our resource. 
			Eg: Created by: gowthaman
				Billing: Az-204
				Department: IT 
				
			Something like this, helpful of logical grouping of what the resource is for, who is the point of contact, subscription that gets billing for this etc..,

	Then Review + Create:
	----------------------
			-> Here all the validations run against the resource properties/parameters and once all satisfied and completes then starts deploying the resource. 
			-> It may take few minutes to complete, once its done, we can see it is not just creating VM but also several resources with it (virtual network, network interface, network security groups, virtual machines) 
				-> As microsoft azure is more modularized, it creates multiple required components as different modules/resources.

		Now we have the virtual machine hosted in azure, the next question is how do we connect to it?

			-> There are three methods by which we can connect to the VM.
			
			-> First of all to view the VM that is provisioned, we can go to virtual machines and select the appropriate subscription and view the VMs created under it.
				-> Once we open the VM we can see all the details that we configured while creating it.
				-> There is also a button to "Connect" to the VM and could see different options provided.
					
		-> RDP - Remote Desktop Protocol(  to windows/microsoft) helpful to remote connect to windows machine.
		-> SSH - Secure Shell - This protocol helps to connect to any linux machine.
		-> Bastion - This is more secure way of connecting to remote machine that are mainly Azure VMs as this helps to connect via something known as "Jump Service" a middle layer via which we can connect to VM.
		
			-> Since I am on Windows and by default it has Remote Desktop Connection tool installed I can just open it and enter the public IP that is shown on the VM (overview) that we want to connect to.
			-> Enter the valid credentials (azureuser/AzureUser@123) and click on connect -> it will open the VM, when we login for the first time, it will take a bit of time to setup out user account, desktop, downloads, documents folders.
			
		We can make the VM to web server by installing IIS features (web server features) and once all required installation completed.
			-> We can directly enter the IP address on the browser to see the server responds.
				http://13.86.224.25/ 
				
	Modify and Stop VM
	-------------------
		-> If suppose we have application hosted in our VM, and the demand for the application growing and we would like to increase its size and scale the VM to support the surging demand, how do we do it?
		-> We can go to VM and click on Resize -> can chose the size that is appropriate and click "Resize".
				-> It does resizes the machine in few seconds/minutes, this is a disruptive operation and will restart the machine.
				
		Deploying the code:
		-------------------
			Okay now we have the VM up and running, but as a developer how do we get our code in to it and make it running?
				-> It has to be manually mostly logging into VM and get our code put it in the IIS folder.
				-> Else we can have Pipeline created to make our code gets deployed to server from repository directly.
				-> But actually this is not the best of the place to deploy our code, more easiest would be use web app.
				
		Backup:
		--------
			We can also Enable Backup to the VM from Backup option -> We need to create a "Resource Services Vault" -> which is like a storage point for storing the data backups.
				-> We can configure how long we want to have the data backup if its;
						-> Standard - once a day backup, upto 5 days data retention.
						-> Enhanced - multiple backups per day, Upto 30 days data retention.
						
		Monitoring
		-----------		
			-> We will talk about it in detail in the coming lessons.
		
		We can stop the virtual machine which would stop the charges being incurred for compute resources, but for storage it would be still charged.
		
		Deleting the VM would delete the storage as we have configured it on VM delete, delete the disk storage.
			-> But ideal way to delete vm would be to delete the resource group so that resources would be deleted which would help in reduction in cost if suppose any underlying resource we forget to delete on deleting vm individually.
		
		
	Azure Resource Manager (ARM) 
	----------------------------					
		We have been creating resources via Azure Portal so far. We also there are few more ways for creating resources in Azure.
			-> Azure CLI
			-> Azure Powershell
			-> APIs
			
		One commonality between these ways is in all these ways the resource will not get directly controlled/created, but there is a deployment model known as Azure Resource Manager model only via which resources are created/modified.
			-> Azure Resource Manager is like an engine, which understands only ARM templates and creates the resources.
			-> But how does this ARM templates get created, so any resource we try to create in Azure using Portal at Review + Create stage, we can see there is a option for - 
							"Download a template for automation"
				-> This is basically all the details that we have provided for different fields in json format and it does not hardcode any fields it has parameters tab where all the values will be defined.
				-> This we can download as well and check it in to any repository as a version control maintenance whenever we have a change in the configuration.
				-> This is also known as "Infrastructure as Code".	
				
		So by any means we try to create a resource that has to go through via ARM engine to finally create/modify resource inside Azure.
			-> Azure CLI or Powershell uses Azure SDK then to connect with ARM engine to create resources.

	Okay but why ARM template? I can easily go to portal and create a resource right!!!!!!!!
	    Yes, but what if after a few weeks of creating a VM, you want to create another 100s of VMs with same configuration, 
		
			-> first of all will you be able to remember all the configurations you've made?
			-> how much effort it would be required to create 100s of VMs manually via Portal?????
		 
		Its tough right!! thats where ARM templates can be very helpful, we can save these templates and via CLI, Powershell we can read these templates, modify parameters as per the needs and run script to create 100s of VMs with much ease than doing it manually.

			So, it is the repeatability and scriptability that makes ARM templates more powerful to have.
			
	Sample Script to deploy using Powershell from https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resources-powershell:
	------------------------------------------------------------------------------------------------------
		$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
		$location = Read-Host -Prompt "Enter the location (i.e. centralus)"
		$templateUri = "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/mic		rosoft.storage/storage-account-create/azuredeploy.json"
		New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri $templateUri -Location $location
			
		This is the command that helps to deploy the resource template -	 		"New-AzResourceGroupDeployment"
		
	Add to library:
	---------------
		-> This is a feature to store the templates within azure as a resource in a resource group.
		-> The stored resource is known as "Template Spec".
		-> The important thing to know is this only stores template.json but not parameters.
		-> And then this can be shared across projects/subscriptions???
		-> We can do the versioning of the stored templates as well..
		
		-> The same can be achieved with the help of storing the templates in Git repository which provides even more robust version control system with better track of history/changes done.
		-> Better integration with CI/CD pipeline. Doing these in Azure itself needs more stuff to be done.
		-> Manage different branches for different projects templates.
		
	We have even heard of the term "Bicep" file.
		-> Bicep is a Domain Specific Language (DSL) which helps to create json templates in a more concise and readable way and with type safe manner as well.
		
	
Creating Resource Using Powershell
-----------------------------------
	-> So far in this course we have created resource using Portal and we have seen how we can use ARM templates to create resources in Azure.
	-> Here we will specifically talk about creating resource in Powershell.
	-> When we create resource using powershell then we have to ensure our Powershell is up to date.

	-> As part of this session we will use Cloudshell in Azure Portal for creating resource using powershell.
	-> For cloud shell we can also go to https://shell.azure.com to make use of Powershell/CLI.
	-> When using cloud shell, it is by default connected to our azure account and it is up to date as it is being maintained by Azure itself.
	
	Now lets jump on to creating resource VM using Powershell Commands.
		Generally powershell commands start with verbs (New, Delete, Get, Set) ....
		Then a "-" (hyphen).
		Since we are in Azure module, cmdlets use "Az".
		
		Sample command to create resource group - 
		----------------------------------------		
				New-AzResourceGroup -Name pwrsgroup -Location "EastUS"
				
		To create a VM
		---------------
				New-AzVM -ResourceGroupName "pwrsgroup" -Location "EastUS" -Name "pwrsVM" -PublicIpAddressName "myPublicIP" -OpenPorts 80,443, 3389
				
		For the other values size, image, it is going to take some default value for creating the VM, it will ask for user and password details.

			We will try this tomorrow morning or sometime later.
			
		Yessss!!!!!! able to create resource group and VM with the above script, after running the script it may take a few seconds to show up in the portal.

			But believe once done, I am able to remote it right away with its public IP address configured.	- 172.178.39.183 
			Even with the "DNS name: azure-pshell-vm-ed52ca.eastus.cloudapp.azure.com" able to connect via browser.
			Once click on "Stop", the remote connection immediately disconnected and not able to connect to machine any more.
			
	Okay once VM created, how do we get the VMs running using Powershell?
			"Get-AzVM"

	One cool thing is when we select Powershell, even we can run valid bash commands (CLI) because it is supported by Powershell as well.

			So, I can run - "az vm list" in powershell to get the details of VM in JSON format (CLI response format).
			
	Creating Resource using CLI (Bash)
	----------------------------------
		"az vm list" - list all the vm
		"az account list" - list of subscription
		"az group create --name "cligroup" --location "eastUS"
		"az vm create --resource-group "cligroup" --name "clivm" --location "eastUS" --image "Win2019Datacenter"
		
		Here we can get the image list published by azure: https://az-vm-image.info/
			
			Document: https://learn.microsoft.com/en-US/cli/azure/ - check for commands here and more details.	
			
Azure APP Service:
==================
		In this section, we will learn about another compute service - "Azure App Service" / "Web App".
		Before we get in to it, lets refresh about the different categories of cloud computing services.
		
	IaaS - Infrastructure as a Service 
	-----------------------------------		
			-> Here except physical layer, we can have a control over other portions.
			For eg: 
					-> Physical Servers, Networking (cables), Storage (disks), Virtualisation - all these are managed by Platform (Azure).
					-> O/S, Runtime, Middleware, Application (code), Data	- all these we need to take care of.
		
	PaaS - Platform as a Service
	-----------------------------
			-> Here, even more couple of layers would be abstracted away from us and will be taken care by platform like O/S, Runtime, Middleware, so only Application, Data are our responsiblity.
			-> We will just need to give the code to Azure for deploying it, all the other aspects are taken care and we will be provided with an agreement from Azure as well about scalablility, availablility of the application with which it will be running.
			-> We will not be known of underlying machine, configuration in which it is running or any other details.
			
	SaaS - Software as a Service
	-----------------------------
			-> This is interesting piece, here we will be just consuming the tool/software like O365 (Excel, Word, Outlook...), Also azure portal is one of the SaaS product we use to create azure resources, so likewise many people would be using various SaaS products day to day across different industries.
			-> As a developer, mostly we would be using IaaS, PaaS category of cloud services offered.
			
	There is another called On-Premise -> 
			-> Here everything from Physical security,servers, storage, networking to O/S, runtime, middleware installations, Application, Data is customer's responsiblity.
			
			We can also set up CI/CD pipeline with Azure DevOps, GitHub, BitBucket etc., so that once after the code is pushed, the pipeline / GitHub actions starts to integration and deployment of the code to server. 
			
	Lets get into it more by creating Azure Web App.
	
Create Web App:
---------------
	We understand so far that web app service is mainly for us to focus more on app development and not to worry more about the underlying infrastructure.
	-> Web App / App Service is a fully managed PaaS service focussed on Web and App applications.
		-> It is available in a range of Free, Basic, Premium and Isolated Environment plans.
		-> It is a cost effective way to rapidly migrate apps, modernize, build Web and API applications in the cloud.
	->	We will see about how can we create a web app from portal.
	-> 	We know this is a compute service, so we can find the "Web App" under compute category or as this is one of the most common used resource we can even see it the top itself where we can find "Virtual Machines". 
	
	Once we click on "Create" we can see the similar wizard kind of interface we have seen for VM with multiple tabs for configuration.
	
	Subscription:
	-------------
		-> Subscription under which the web app has to be charged against.
	
	Resource Group: 
	---------------
		-> Under which resource group this new web app has to be part of.

	Name:
	-----
		-> The name has to be unique across azure - since it suffixes with the domain name "xyz".azurewebsites.net.
		-> Most of the times "new-web-app", "test" etc., will not work.
		
	Publish:
	--------
		-> Here we can choose if this is "Code", "Docker" or "Static Web App" (html, css) based applications.
	
	Runtime Stack:
	--------------
		-> We can select the runtime stack that is used for the application (.NET, Java, Ruby etc.,)
		-> Based on this the OS also can be changed (Linux, Windows) but infact it does not matter which OS it uses as we do not have any control over OS and it all taken care by platform.

	Region:
	--------
		-> Region where we want our application to be deployed. (East US, West US, UK South etc.,)
		
Next we will see about App Service Plan.	

App Service Plan:
------------------
	-> Basically it provides us with the pricing model of the apps and as well as the hosting option.

	-> Okay, so we know when we create a VM, we have the option to choose the size of the machine, disk space, but here with App Service we do not have the option to choose any of these, still the cost associated with a App Service could vary based on these parameters (region, size, disk space etc.,) 
	
	-> But we get the option to choose the App service plan and pricing plan/tier.
	
	What is Pricing Plan / tier?
	----------------------------
		-> App Service plan pricing tier determines the location, features(auto scale, custom domain,daily backup zone redundant), cost and compute resources associated with your app.
		
		-> Here we get to see different plans with different pricing associated as well we can see what would be the size, memory of the VM instances, SLA (like 99.95%) and about different features like auto scaling, custom domains, daily backups, staging slots.
		
			Linux							Windows						
			-------							-------------
			1. Free 						1. Free (not for production workloads, for exploring)
			2. Basic 						2. Shared (not for production workloads,for exploring)
			3. Premium						3. Basic (For less demanding workloads)
			4. Isolated	(Dedicated Host)	4. Standard (Legacy)
											5. Premium (For most production workloads)
											6. Isolated - App service Environment (Advanced Networking and Scale)
	
	On comparing windows and linux, you can see there is a shared tier exist for windows which do not exist for Linux, apart from this there is a price difference between them and you can see it here in below pages.	
											
	Here is the pricing page for the app service plans for Linux and Windows.
	
	-> https://azure.microsoft.com/en-us/pricing/details/app-service/windows/
	-> https://azure.microsoft.com/en-us/pricing/details/app-service/linux/
	
	We can notice in most of the cases Linux OS plans are way cheaper than windows plans.
	
	For eg;
	--------
		Basic plans B1, B2, B3 costs 13,25,51$ per month for Linux. (way cheaper)
		Same for Windows costs 54$, 109$, 219$ per month. 
	
	And another thing is the compute power/performance we get for a plan is mentioned in ACU (Azure Compute Units).
	
	For eg:
	--------
		For Basic B1 we get 100 (ACU), same for Premium v3 P0V3 195* (ACU) 
			-> meaning we get almost double the power of compute performance in Premium than Basic B1 plan.
			
	So now it must be understood that for any Web app to be created we need a App service plan because which is what going to decide on compute/memory resources of the VMs, pricing for the app.	

	Can we deploy multiple applications on a App service plan?
	----------------------------------------------------------
		Yes we can, but we need to understand about the total memory we have for the plan and how many apps would make sense to not degrade the performance of the apps hosted in the plan.
		
	So for this session we will pick Basic B1 plan and continue in further sessions. 	

Next is Zone Redundancy
------------------------
	-> This is relatively new in App service, we have seen about it in VMs where the same VM would be replicated to 3 different data centers to help serving the app if there is any failure with any one of data center where the application is hosted.
	
	-> Here the same App service plan (which actually sets up the compute resources) would be replicated to 3 different zones/data centers minimum when we enable zone redundacy.
		-> This can be enabled only for Premium plans.
		-> For basic, free plans this cannot be enabled.
		
	And please take it into mind that this is deployment time only decision, once it has been deployed we cannot make the App Service Plan zone redundant.
	
Deployment
-----------
	-> Here we can do the configurations related to continuous deployment of our app whenever we push the code to repository. 
		-> This can be done with the help of GitHub actions which triggers automatic deployment of code.
		-> We can provide the related Github account, repository details.
		
Networking
----------
	-> This helps in configuring the inbound (incoming) and outbound(outgoing) address/requests for out web app.
	-> By default, our inbound would be public to internet accesses, but we can configure it to have access only from certain virtual networks, restricted by NSGs etc..,

	Enable Network Injection:
	---------------------------	
	-> We can also make our web app to be deployed in to a specific Vnet that is in the same region for it to connect to other resources inside the Vnet, but our app would still be accessible to public ip addresses unless we deny public access to our app.
		-> This would help in several aspects like security, compliance for our web app, could make use of different features of Vnet to control access to and from our app in secure manner.

Monitor + Secure
------------------
	-> The main way that our app will be monitored using Application Insights which will log the data about the performance anamolies, errors, and includes powerful analytics tool to provide us with more details to analyse, diagnose the issues, how the app is performing, how the users are using our app etc..,	
		-> The cost for it would be billed based on amount of data captured/used by App insights and data retention settings we configured. cost would be per GB, per Day...
		
Microsoft Defender for Cloud
-----------------------------
	-> When we add defender to our app service plan, it would provide cloud native security solution, it makes use of the logs, requests, VM instance and more, detecting threats and ongoing attacks to our resources.

Tags
-----	
	This we have already seen above for VMs, like a meta data provider about the resource who the owner, environment, department etc.., for logical grouping/categorizing of resources, helpful for billing purposes.
	
Review + Create =>	So right now our new web app is created, next session we will see about how do we do manual scaling of our app.

	You can notice from deployment details, that it has created serverFarms which is the App service plan, Sites (our web app/app service) - remember we can have multiple web apps created onto a single app service plan, different components like app insights etc.,
	
Manual Scaling
--------------
	-> Once deployed we can go to App service plan resource -> there is a option under settings for scaling of our plan.
		
		Scale up
		---------
			-> With this we can change the plan/pricing tier/stock keeping unit (SKU) of our App service plan like from Basic B1 -> B2/B3/Primary/Standard/Isolated plans based on which compute resource/capacity we would want our plan to be in.
			-> Obviously it would increase cost respectively.
			-> One interesting thing during this upgrade of our plan, there would be no interruption to our apps hosted in the plan, it is designed in such a way there would be very smooth transitioning of the app and very rare case there would be minimal performance glitches but most often than not end users would not see any such difference/interruption in the app.
			-> During upgrade, inbuilt load balancer would keep routing the requests to existing plan and new plan to ensure that there is no downtime until the resources are completely migrated to new plan.

		Scale out
		----------
			-> This is the approach where the instances of the plan can be increased to max allowed limit as per SKU.
			-> For Basic -> it is max of 3, for Premium it can be upto 30 instances.
			-> When demand arise, the plan would scale upto 3 instances.
			
			For Automatic Scaling, we would need to change the plan to premium.
			
Opening the web app just created:
-----------------------------------
		URL: https://jkavin.azurewebsites.net/ 
		
			Since no code is deployed yet, it will pop up with default page with following content.
				
				"Your web app is running and waiting for your content"
				
		We can also see how many requests are sent to the app from the Monitoring tab -> Key Metrics		
				
Backups
--------
	App -> Settings -> Backups -> Currently I see it backs up every 1 hour. We can select a restore point to restore the specific backup.
	
	One of the main advantage of App service over VM is the ease at which the application can be deployed to it.
		
	Lets try to create a Hello world app and to push to our app service in the next session.
	
Publish Hello World to our App Service
---------------------------------------	
	Created a new application from visual studio -> Hello, world text -> for publishing to Azure App service 
	"
		Build -> Publish -> Add a publish profile -> Azure (Host application to the cloud) -> Azure App Service (Windows) -> Connect to azure account (gowthamn91@outlook.com/mSftYrSheeftOne2Three) -> select subscription -> select the app service listed where we want our code to be deployed (JKavin) -> Finish 
	"	
		-> Publish profile would be created -> Now click Publish -> which starts publishing the code to the cloud App service directory, once done -> restarts web app -> open the browser go the app service (https://jkavin.azurewebsites.net/) you can see our hello world app opens.
			
	You can see how easy it is to deploy our app to App Service, which is not the case with VM. And there is also different options for deployment apart from manual, using CI/CD Github actions, Bitbucket, Azure Repos etc...,

Deployment Slots
----------------
	Ok now we have our hello world app deployed to our App service.
	One thing I tried to deploy Vidly app also to the app service, what happening was, it replaced the hello world app with vidly app code and vice versa.	
			-> what if we want to have different urls and different code to be deployed to each url.
			-> The best use case for this kind of thing is, we will have our app deployed to production environment, also to staging/dev environments with different url.
			
			probably something like this:
						"https://jkavin-staging.azurewebsites.net/"
			for production:
						"https://jkavin.azurewebsites.net/"
			
		how do we have that? ofcourse the answer to it is "Deployment Slots" option in App Service -> which is enabled only standard or higher tiers.
		-> We can add a deployment slot with naming for eg: staging, it will form the unique url other than what is there for other environment (production).
		
		And while deploying from Visual Studio -> we can create a publish profile with the respective deployment slot selected. Once published, we can load the url to view the app deployed to staging via - 	https://jkavin-staging.azurewebsites.net/.
		
		And if suppose after all testing we want to move the code to production slot, how do we do it? ofcourse we can publish the code to the respective environment, but you know this would be error prone, but if the code from staging to be smoothly moved to production then thats even better without much manual intervention to make sure error free production deployment.
			-> In Deployment slot, there is a option to "Swap" the code/app between the two slots which is done very smoothly the respective staging code would be moved to production and prod code would be moved to staging.
			-> This even helps in having the current prod version in back up environment(slot) so that if at all there is an issue with prod, immediately swap the code from staging (previous production) resolve the issue and then fix it in dev and push to stage for testing.

			
			
Settings
--------
	Go to Settings in App Service -> Configuration -> There are different settings that can be configured here.
		Stack Settings:
		----------------	
				-> Stack (.Net, Python, NodeJs, Java)
				-> Runtime version (.Net version 8,7,6, Asp.Net 4.8 etc.,)
				
			When we change any of this, our app would have downtime for a brief amount of time, and also there would be some impact based on the run time/stack changes to our app, if some features that we expect for our app might not exist in some old/new runtime versions and that can cause issues to our app.
				
			So this change is a key decision that needs to be done with careful consideration/testing to the production app.

		Platform Settings
		-----------------
			Here we can configure the aspects of the environment in which we want our application to run. These settings primarily control the system-level specific configurations that affects how our app functions.
			
				-> 32 bit / 64 bit
				-> Managed Pipeline Version (Integrated vs Classic)
					-> basically how the request gets processed
				Classic
				--------	
					Client -> Request -> Web server (IIS) -> Asp.Net rutime processes and respond back
				Integrated
				-----------	
					Client -> Request -> Unified environment (Web server (IIS) + Asp.Net rutime) processes and respond back

					-> reduces the overhead and improves performance.

				-> Http vs Https and respective protocol versions for our app.
				-> Remote debugging feature which can connect to VS to debug production code (not recommended generally) but to be used very carefully as involves security risk.
				-> Web sockets (on/off)
				-> ARR affinity.
				-> If App always ON - (reduces response time if it goes idle between requests)
				-> SCM / FTP basic publishing credentials
				
	Environment Variables
	----------------------
		App settings (Key / value pairs that can be used by our app runtime)
		Connection strings ( DB connection string, storage or etc..,)
		
	These details instead of adding in web config/app config/app json, can be stored here for a security purpose for production, and good thing if stored in solution it will be stored in git hub/ repo also, which is unnecessary for the production connections/keys required.\
	
	Code can have only dev/staging configurations/keys needed as it would be required for developers.
	
TLS/SSL Settings
----------------
		-> I do not see an option for this in portal, but what I could see is, this is about Https only settings in App Service, TLS version etc.,
		-> This will make even though we try to open our app "http://jkavin.azurewebsites.net/" with "http", it will automatically redirect it to "Https".
		-> In code also we use to have the method app.UseHttpsRedirection() to enable this.
		
		When I add a custom domain "gskavin.com" inside our app service then I can access our app like below:
					"https://www.gskavin.com/"
					
		->	When having it, we need to also need to get a certificate for serving the application in secure fashion. But for azurewebsites.net domain we do get a default certificate (wildcard certificate) from Microsoft.
		-> For certificate there is also something called as self signed certificates for those are not recommended for production, it can be used for dev, testing environments.
		->	There are different binding types (SNI SSL, IP based SSL)
				lets learn about these also.
				
			Note this custom domain cost: 12$/Year, hence after testing deleting it.		

Autoscaling an App Service
---------------------------
	-> We have seen about scaling in earlier sessions also.
			1. Scale up  (Vertical)
			2. Scale out (Horizontal)
		-> Scale up is all about upgrading to higher tier plans, but even then there is always max limit of ACU for a plan.
		-> But for a better scaling of the app, it is best to go for scale out (horizontal), there are two ways this can be done - Manual and Custom auto scale.

	Manual: 
	--------
			-> Increase the instance count of our app service and based on load balancer decision the requests would be routed to specific instance.
			
	Custom auto scale:
	-------------------
			-> Based on a rule we can scale in / out the instances count for our app, the rule could be based on a metric (CPU %, memory available, http queue length ...,) 
				like start with 1 instance, when CPU % goes > 70%, increase count by 1
				the same when CPU % goes < 25%, decrease the instance count by 1.
				
			-> There is also other way like during certain days, time range scheduled to run x number of instances like 10 (Mon-Fri between 10am to 5pm) and run only 2 (other days and time).

	We know for a VM there is a VMSS, but one thing to know is here in App service code is deployed, so only instance needs to be up with same code already deployed, but with VM, VM has to be up and then there is a overhead to make the code deployed to new instances, which is not the case with App service alteast it is handled by Azure with much ease.
	
	
Enable Diagnostic Logs:
------------------------
	-> Diagnostic - to identity the problem, root cause, solution, fix/prevent it for future occurence.
	Ok now we have our App service running, if suppose there is a problem / issue occur how do identify it and resolve.
		-> Obviously we need to log the information/errors needed for viewing, analysing etc.,
		-> When we go to our App service -> Overview -> We have Monitoring tab where we have several Key Metrics in graph format displaying, 
			-> Http 5xx(error)
			-> Data in, out of our app
			-> Number of requests, Response time
			
		This gives us some details about how our app is performing, any issues, difficulties it is having.	
		
	We want to be getting some information out of our app service, for this we have Monitoring menu -> where we can setup alerts based on various signals like CPU time, Response time, Requests, Http errors etc.,
	
	There is metrics sub menu where we can view details for different metrics cpu time, response time, data in, data out etc.,
	
	App Service Logs
	------------------
	 -> This basically provides different logging for the app service.
		
		Application Logging
		--------------------
			-> This captures events, information, error that captured from the application code itself, it tells about the internal working/behavior of the application itself.
			-> Can be configured to store in file system/blob or both...
			
		Web server Logging
		------------------	
			-> This captures events that take place in web server like http requests, responses, errors, but not the internal behavior of the code.
			-> Can be configured to store the logs in the file system or blob but not both.
			
		-> Detailed error can be captured, Failed request tracing (logs failed requests)....
		-> But we know for App service we do not have access to any physical server/path then how do we access the log file, there is a option provided to download the log files to a ftp path.
		-> Can configure the Quota (MB) size limit of the logs captured, Retention period (days) for the captured file, beyond the value set the files will be deleted.

This is one type of logging, next is Diagnostic Settings.

Diagnostic Logs
----------------
	-> This helps to collect various logs and stream these in to a destination for analysing, troubleshooting, resolving the issues.		
	
	Category of logs:
	-----------------
		-> Http Logs (http requests, response, status, client IP address...)
		-> App service console logs
		-> App service application logs (application related logs) 
		-> Access audit logs (logs related to who accessed, what resources accessed, actions performed)
		-> IP Security Audit logs (logs related to IP addresses, allowed/restricted requests based on IP restrictions configured.
		-> App service platform logs (logs from platform related to changes in underlying infrastructure)
		-> App service authentication logs (logs related to authentication, user sign ins, sign outs, accessed URLs, statuses)		
	
	Ok now we have configured the list of category of logs to be captured, but where does these get stored for further retrieval and troubleshooting.
		That is what we have to configure the destination of the device where it has to be storing the logs.
			-> Log analytics workspace (under Azure Monitor, designed for collecting the logs do analysis, but this is not blob storage)
				-> to view the data stored we can use KQL Queries (Kusto Query Language) 
			-> Storage account
				-> To logs are stored as blobs in container within a storage account.
			-> Stream to an event hub
				-> Event hubs are fully managed service for real time data ingestion for processing, analysing logs in near real time.
				-> it can be collecting data from various sources including applications, web sites, IoT devices etc.,
			-> Send to partner solution
				-> Mainly for sending/streaming the data to third party solutions for log analysis/processing.
				
	There is also a feature "Log Stream" to view the logs stream in console almost near real time manner the web server logs and application logs, opening that and loading the web application -> we can view the requests logs in the console within few seconds or near real time manner.

	In the next sessions we will learn about creating a web app using powershell, bash scripts...

Create WebApp using PowerShell
-------------------------------
	-> Suppose we don't know the exact commands to use, then we can use below command with wild card characters

					-> get-command *AzWebApp* (which lists all the commands with AzWebApp
					
		List commands that tested:
		---------------------------
				-> Start-AzWebApp -ResourceGroupName "new-webapp-rg" -Name "JKavin"
				-> Stop-AzWebApp -ResourceGroupName "new-webapp-rg" -Name "JKavin"
				-> Get-AzWebapp (lists all the web apps in the subscription)
				
				This get-command can be helpful when we don't know the command or what command to be used, it is also helpful during the exam if we do not have it handy.
		
	For creating new web app, we need a resource group, app service plan.
	
		Resource group 
		---------------
			"New-AzResourceGroup -Name "powershell-webapp-rg" -Location "EastUS" 
		
		App Service Plan
		----------------
			"New-AzAppServicePlan -ResourceGroupName "powershell-webapp-rg" -Name ps-jkavin -Location "EastUS" -Tier Free"
		
		Web APP
		--------
			"New-AzWebApp -ResourceGroupName "powershell-webapp-rg" -Name "PS-JKavin" -Location "EastUS" -AppServicePlan ps-jkavin "
			
			Created another:
			-----------------
			New-AzWebApp -ResourceGroupName "powershell-webapp-rg" -Name "PS-JKavin2" -Location "EastUS" -AppServicePlan ps-jkavin	
			
			Now "Get-AzWebApp" lists all the three web apps (jkavin, PS-JKavin, PS-JKavin2)	within the subscription.
			
	After creating opened -> Visual studio -> Azure Web App Test Razor.sln -> Publish (Build menu) "
		Build -> Publish -> Add a publish profile -> Azure (Host application to the cloud) -> Azure App Service (Windows) -> Connect to azure account (gowthamn91@outlook.com/mSftYrSheeftOne2Three) -> select subscription -> select the app service listed where we want our code to be deployed (JKavin) -> Finish 
	"	
		-> Publish profile would be created -> Now click Publish -> which starts publishing the code to the cloud App service directory, once done -> restarts web app -> open the browser go the app service (https://ps-jkavin.azurewebsites.net/) you can see our hello world app opens.	

Creating web app using Bash CLI
--------------------------------
Resource group:
				
			"az group create --location eastus --name cli-rg"	
			"az group list" (To view the list of resource groups: )

App service plan:

			"az appservice plan create -n cli-appserviceplan -g cli-rg"
			"az appservice plan list" (list of appservice plans)

			"az appservice plan update -n cli-appserviceplan -g cli-rg --sku f1" (update app service plan command)	
			
Web app:
			"az webapp create -g cli-rg -p cli-appserviceplan -n cli-newwebapp-1"	
			"az webapp list" 
			
			-g : resourcegroup, -n : name, -p: plan

Az webapp up 
------------
	There is a command "az webapp up" which does creation of web app and deployment of code in a single line of command, instead of above three commands to create resource group, app service plan, web app seperately.
		
		Sample command:
		---------------
		
				" az webapp up --name new-webapp-up-1 --location eastus --sku f1 --html"
				
		Name: new-webapp-up-1 (checks if exists, if not then creates, else updates)
		sku : configure the pricing tier of the plan
		
		--html : for creating this web app as static html web app.
		--resource-group "group name"
		--plan "cli-appserviceplan"
		
		if no resource group, plan mentioned, then it automatically creates a new plan, rg...
		
		using mkdir "new folder" - created a new folder
		cloned a code from azure samples - https://github.com/Azure-Samples/html-docs-hello-world
		
		change dir to "new folder" created in bash -> now run "az webapp up" command to create a web app and deploy the code we have cloned in the folder, so it auto creates web app and gets the code deployed in same command.
		
		But when I try to open the web app created - 
		
			https://new-webapp-up-2.azurewebsites.net/
			
		I keep getting - "You do not have permission to view this directory or page."

		It is something needs to be checked....	
		
Web App Console:
----------------
	Now we are able to create a web app (resource group, app service plan) via Portal, CLI, Powershell... 
	Also, we know App service is a PaaS service and we do not have control over underlying infrastructure, hence if suppose any issues for eg: 
	
		if a specific page is not loading and we want to check if the file does exist in the server or not, how do we do it? Here is the way to check the server configurations, settings, connection strings, files in the wwwroot folder.  
	
		"Web App -> Development tools -> Console" 
		
	C:\home\site\wwwroot> -- Path where we can view our app files stored/published in the VM of our app service.
	
	There is also Advanced Tools option which take us to Kudu service site.
	
	What is Kudu service site?
	---------------------------
		-> When we create a web app, it has a hidden / background service site called Kudu which has the URL similar to our web app url but with .scm (included) [site control manager]
		
			sample: "https://jkavin.scm.azurewebsites.net/"
	
	Environment
	------------	
	It has several advanced options to view the environment details, app settings, connection strings, System info of the server like processor count, 32/64 bit, OS version, Machine name, CLR version...,
	
	Debug Console
	--------------
	Debug console -> CLI / Powershell using which we can access the respective file we want to view or make changes, which helps without much overhead admin can make the changes to the server/application configuration easily.

	Process Explorer: 	
	------------------
	To view more details about what are the processes currently running and its more details.

	Tools -> has more options to download diagnostics dump (which keeps streaming the logs of our app), Webjobs dashboard, Web hooks, Support...	
	
	Site extensions: 
	-----------------
		-> Here we get the number of third party tools that can be installed to extend the capability of our app service apart from what is natively provided by Azure.
		
Azure Containers
------------------
	Basically containers are virtualisation within the OS, meaning for number of containers it uses the same CPU, Memory, OS unlike VMs which has virtualisation at the hardware level, different VMs can have different OS/softwares installed... 

	It also means container cannot have different OS for different instances, it must be same as the host OS. 
	
	When we create a web app, in the publish option we can see it can be Code, Static Web App, Container.
	
	Likewise there are also other types of container resources. 
	When we go into Containers category -> we can see various resources like below;
		-> Azure Kubernetes Service (AKS)
			-> Orchestrator solution to deploy the apps to containers and load balance, supports auto scaling... 
		-> Container Instances
		-> Container Registry
		-> Web App for Containers
		-> Batch Service
		-> Service Fabric Cluster
		....
		
	In this AKS is not on the exam, we will learn about container instances, container registry.
	
	->	Container Instances is the simplest form of container, and it is very low effort to create a container, may not be great for production, but for testing purpose we can quick creation of container and use it.
 	
	Lets create a simple container instance -> Provide the resource group, location, SKU, Image source (Quick start, Azure Container registry, Other registry)
	
	With Quick start image selected, we can chose the container image from already stored sample image templates.
		-> Hello world image selected.
		
	DNS name label: mytestcontainer 
		
	Rest of the options go with default. Review and create, ACI created.
	FQDN: mytestcontainer.gfc0cdd2g2gzh3fz.eastus.azurecontainer.io (Fully Qualified Domain Name)
	By loading the above FQDN - we can see a sample container instance up and running.
	
			with the message "Welcome to Azure Container Instances"
			
	Another use of Container Instances is it can act as a burstable scaling feature for AKS, so whenever the demand/spike arise which is not able to be handled by AKS cluster with its current capacity, it can offload some of its workload to ACI by integrating with it.

	-> So it helps in quickly provisioning the container instance and serve the SPIKE, if at all AKS cluster has to be scale in/out then it can take some more time than what ACI takes and also ACI is fully managed, AKS is not managed by platform, that we have to take care.
	
	-> it can reduce from cost perspective also.
		
	Next session we will learn about deploying our custom application to ACI and testing...
	
	Container image - is a lightweight, standalone, executable package that includes everything  needed to run a piece of software.
	
		-> This package contains the application code, libraries, environment variables, configuration files and all dependencies.
		-> Essentially a container image is a snapshot of container's file system at a particular point in time.
		
	Container registry - is a service or repository that stores, manages container images, these images are essential components of a containerized applications, and a container registry provides a centralized place to store, share and distribute them across different environments.	
	
	Since this is a centralized directory/repository from here the container can be deployed tom different environments development, testing, any other container hosting services ...
	
	Ok lets create a container registry and try to deploy some container apps to it and using that we will try to deploy the application to different environments.
	
	Go to create resource -> Container registry -> Resource group, Location, CR name
	Then we can choose the pricing tier/service tier (SKUs - software keeping units) - 
				-> Basic
				-> Standard
				-> Premium
				
		Based on the tier, cost, included storage, system's throughput varies.

		Networking: 
				-> Public access (connect to this registry via public IP)
				-> Private (recommended) but enabled only for Premium plans
		Encryption:
				-> Enabled only for premium plans, helps in encrypting the data that we have in registry, code, other artifacts, data when they are pushed to registry, and decrypted when they are pulled out of registry.
	
	Review + Create ->  Ok now the Container Registry is created 
					-> jkavincr
					-> jkavincr.azurecr.io

		Container registry with nothing in it is not useful for anyone.
		So we have to deploy container images(compiled, build, ready to deploy) to it. These are called repositories which is under "Services" in the Container Registry.

	Lets try pushing/publishing our sample web app that we created earlier as a container registry.
		-> Couple of things we need to do before we are able to publish our code as container image.
					-> "Install Docker Desktop"
					-> Docker support in Visual Studio 
			
		"Docker" is the industry standard for image container formats, so we need to take our web app and turn it into docker image. That can be done with the help of "Docker Desktop".

	Installed Docker Desktop -> Opened it from hidden icons in taskbar -> Open it -> start it 

		"currently docker engine is running status"
		
	Go to visual studio -> open project -> right click project -> Add -> Docker support -> it adds the Docker file to the project -> which contains the .csproj, dll details of the container.

	Now we want to make this a container image, we can use below commands in CMD to see if there are any container running, container images exist.
				1. docker ps (list running containers) ps: process status
				2. docker images (list all the container images stored on local docker host)
		
		Run the solution with "Docker" option in target which compiles and builds the app to a container image.
		
		Now the publishing process -> Build -> Publish -> Choose Azure -> Azure Container Registry -> Select the ACR -> Finish -> Then publish.
		
		Facing some issues while publishing to ACR -> updated the visual studio, resolved it.
		Once published, next session we will learn about how to deploy ACI app from ACR.
		
	Now the container published to ACR. Now I can see the published container in the ACR repositories.

Deploy an ACI from ACR
-----------------------
	-> Create ACI -> This time image select Azure Container Registry option -> select registry that is created (jkavincr) -> image tag (latest) -> Provide the DNS name label -> Review + Create 

	Finally able to run the container app with this;
		http://aci-test-2.aph9cvb0ahefepar.eastus.azurecontainer.io:8080/
		
	So we have to see what are the ports that are exposed from Docker file like below;
				"
					EXPOSE 8080
					EXPOSE 8081
				"
		And in our ACI, we have to have these ports configured as well for listening, then only this is working as expected. 
		Also, in our .csproj file have this line added;
			
			"	<ContainerUser>root</ContainerUser>"(check below article)
		https://learn.microsoft.com/en-us/answers/questions/1483906/running-net-8-azure-container-instance-app-as-root
	
	Logs can be checked in ACI -> Settings -> Containers -> Logs tab (it gives info, errors which ports the app is listening to)

In the next section, we will see about deploying web app from ACR.	
			
			
			
			
				